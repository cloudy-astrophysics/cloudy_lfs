#!/bin/sh
comp="$*"
config="cloudyconfig.h"
rm -f $config
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
int sub()
{
    return 1;
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.o ]
then
    obj="o"
elif [ -r tmp_cloudyconfig.obj ]
then
    obj="obj"
else
    echo "no object file found, is the compiler working?"
    rm -rf tmp_cloudyconfig.*
    exit 1
fi
echo "// this file was generated by configure.sh." > $config
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <cmath>
#include <complex>
using namespace std;
double sub(double x, long i)
{
    return powi(x,i);
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_POWI 1" >> $config
else
    echo "#undef HAVE_POWI" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <cmath>
#include <complex>
using namespace std;
double sub(double x, int i)
{
    return pow(x,i);
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_POW_DOUBLE_INT 1" >> $config
else
    echo "#undef HAVE_POW_DOUBLE_INT" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <cmath>
#include <complex>
using namespace std;
double sub(double x, long i)
{
    return pow(x,i);
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_POW_DOUBLE_LONG 1" >> $config
else
    echo "#undef HAVE_POW_DOUBLE_LONG" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <cmath>
#include <complex>
using namespace std;
float sub(float x, int i)
{
    return pow(x,i);
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_POW_FLOAT_INT 1" >> $config
else
    echo "#undef HAVE_POW_FLOAT_INT" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <cmath>
#include <complex>
using namespace std;
float sub(float x, long i)
{
    return pow(x,i);
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_POW_FLOAT_LONG 1" >> $config
else
    echo "#undef HAVE_POW_FLOAT_LONG" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <cmath>
#include <complex>
using namespace std;
double sub(double x, float y)
{
    return pow(x,y);
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_POW_DOUBLE_FLOAT 1" >> $config
else
    echo "#undef HAVE_POW_DOUBLE_FLOAT" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <cmath>
#include <complex>
using namespace std;
double sub(float x, double y)
{
    return pow(x,y);
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_POW_FLOAT_DOUBLE 1" >> $config
else
    echo "#undef HAVE_POW_FLOAT_DOUBLE" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <cmath>
using namespace std;
double sub(double x)
{
    double s,c;
    sincos(x,&s,&c);
    return s+c;
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_SINCOS 1" >> $config
else
    echo "#undef HAVE_SINCOS" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <cstring>
#include <cstdio>
using namespace std;
int main()
{
    const char* s = "some string";
    size_t n = strnlen(s,12);
    printf( "%ld\n", n );
    return 0;
}
EOF
$comp -o tmp_cloudyconfig.exe tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -e tmp_cloudyconfig.exe ]
then
    outp=$(./tmp_cloudyconfig.exe)
else
    outp="invalid"
fi
if [ "$outp" = "11" ]
then
    echo "#define HAVE_STRNLEN 1" >> $config
else
    echo "#undef HAVE_STRNLEN" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <cmath>
#include <cstdio>
using namespace std;
int main()
{
    constexpr double d = sqrt(121.);
    printf( "%ld\n", (long) d );
    return 0;
}
EOF
$comp -o tmp_cloudyconfig.exe tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -e tmp_cloudyconfig.exe ]
then
    outp=$(./tmp_cloudyconfig.exe)
else
    outp="invalid"
fi
if [ "$outp" = "11" ]
then
    echo "#define HAVE_CONSTEXPR 1" >> $config
else
    echo "#undef HAVE_CONSTEXPR" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <cstdlib>
#include <climits>
#include <cstdio>
using namespace std;
void sub()
{
    char *ptr = realpath( ".", NULL );
    printf( "%s\n", ptr );
    free( ptr );
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_REALPATH 1" >> $config
else
    echo "#undef HAVE_REALPATH" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <immintrin.h>
using namespace std;
__m256d sub(__m256d x)
{
    return _mm256_mul_pd(x, x);
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_AVX_INTRIN 1" >> $config
else
    echo "#undef HAVE_AVX_INTRIN" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <immintrin.h>
using namespace std;
__m256d sub(__m256d x)
{
    return _mm256_fmadd_pd(x, x, x);
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_FMA_INTRIN 1" >> $config
else
    echo "#undef HAVE_FMA_INTRIN" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <immintrin.h>
using namespace std;
__m256i sub(__m128i x)
{
    return _mm256_cvtepi32_epi64(x);
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_AVX2_INTRIN 1" >> $config
else
    echo "#undef HAVE_AVX2_INTRIN" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <immintrin.h>
using namespace std;
__m512d sub(__m512d x)
{
    return _mm512_mul_pd(x, x);
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_AVX512F_INTRIN 1" >> $config
else
    echo "#undef HAVE_AVX512F_INTRIN" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include "cdstd.h"
#include <iostream>
#include <sstream>
using namespace std;
int main()
{
    istringstream iss("12.34a");
    double x;
    iss >> x;
    if( !iss.fail() && x > 12.3399 && x < 12.3401 )
        cout << "good\n";
    else
        cout << "bad\n";
    return 0;
}
EOF
$comp -o tmp_cloudyconfig.exe tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -e tmp_cloudyconfig.exe ]
then
    outp=$(./tmp_cloudyconfig.exe)
else
    outp="bad"
fi
if [ "$outp" = "bad" ]
then
    echo "#define HAVE_LIBCPP_BUG 1" >> $config
else
    echo "#undef HAVE_LIBCPP_BUG" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#include <execinfo.h>
void PrintBacktrace()
{
	const int BUFSIZE = 50;
	void* array[BUFSIZE];
	int size = backtrace( array, BUFSIZE );
	if( size <= 0 )
		return;
	char** strings = backtrace_symbols( array, size );
	if( strings == 0 )
		return;
}
EOF
$comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -r tmp_cloudyconfig.$obj ]
then
    echo "#define HAVE_BACKTRACE 1" >> $config
else
    echo "#undef HAVE_BACKTRACE" >> $config
fi
rm -rf tmp_cloudyconfig.*
cat >> tmp_cloudyconfig.cpp <<EOF
#ifdef __SUNPRO_CC
extern "C" int cplus_demangle_noret(const char*, char*, unsigned long);
#else
#include <cxxabi.h>
#include <cstring>
#include <cstdlib>
#endif
#include <iostream>
int main()
{
    char buf[1024];
#ifdef __SUNPRO_CC
    int p = cplus_demangle_noret( "__1cMParseCrashDo6FrnGParser__v_", buf, sizeof(buf) );
#else
    int status;
    char* demangl = abi::__cxa_demangle( "_Z12ParseCrashDoR6Parser", 0, 0, &status );
    int p = 1;
    if( demangl != 0 ) {
	    strncpy( buf, demangl, sizeof(buf) );
	    free( demangl );
	    p = 0;
    }
#endif
    if( p == 0 )
        std::cout << buf << "\n";
    else
        std::cout << "invalid mangled name!\n";
    return 0;
}
EOF
$comp tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ ! -e a.out ]
then
$comp tmp_cloudyconfig.cpp -ldemangle > tmp_cloudyconfig.err 2>&1
fi
if [ -e a.out ]
then
    outp=$(./a.out)
else
    outp="invalid"
fi
if [ "$outp" = "ParseCrashDo(Parser&)" ]
then
    echo "#define HAVE_DEMANGLE 1" >> $config
else
    echo "#undef HAVE_DEMANGLE" >> $config
fi
rm -rf tmp_cloudyconfig.* a.out*
outp=$(which addr2line 2> /dev/null)
if [ "x$outp" != "x" ]
then
    echo "#define HAVE_ADDR2LINE 1" >> $config
else
    echo "#undef HAVE_ADDR2LINE" >> $config
fi
outp=$(which atos 2> /dev/null)
if [ "x$outp" != "x" ]
then
    cat >> tmp_cloudyconfig.cpp <<EOF
#include <dlfcn.h>
#define _XOPEN_SOURCE
#include <ucontext.h>
void sub(void* addr)
{
    Dl_info info;
    dladdr(addr,&info);
    ucontext_t* ucontext = (ucontext_t*)addr;
#ifdef __amd64
    void* ip = (void*)ucontext->uc_mcontext->__ss.__rip;
#else
    void* ip = (void*)ucontext->uc_mcontext->__ss.__eip;
#endif
}
EOF
    $comp -c tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
    if [ -r tmp_cloudyconfig.$obj ]
    then
	echo "#define HAVE_ATOS 1" >> $config
    else
	echo "#undef HAVE_ATOS" >> $config
    fi
    rm -rf tmp_cloudyconfig.*
else
    echo "#undef HAVE_ATOS" >> $config
fi
cat >> tmp_cloudyconfig.cpp <<EOF
#include <fstream>
#include <iostream>
using namespace std;
int main()
{
  ifstream ran( "/dev/urandom", ios::in | ios::binary );
  unsigned long long s;
  ran.read(reinterpret_cast<char*>(&s), sizeof(s));
  if( ran.good() )
    cout << "success" << endl;
  else
    cout << "bad" << endl;
  return 0;
}
EOF
$comp -o tmp_cloudyconfig.exe tmp_cloudyconfig.cpp > tmp_cloudyconfig.err 2>&1
if [ -e tmp_cloudyconfig.exe ]
then
    outp=$(./tmp_cloudyconfig.exe)
else
    outp="bad"
fi
if [ "$outp" = "success" ]
then
    echo "#define HAVE_URANDOM 1" >> $config
else
    echo "#undef HAVE_URANDOM" >> $config
fi
rm -rf tmp_cloudyconfig.*
